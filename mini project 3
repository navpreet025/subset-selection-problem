{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP/xQ/hMHgPXwxaa1GJSfat",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/navpreet025/subset-selection-problem/blob/main/mini%20project%203\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Subset Selection Problem\n",
        "1. Problem Statement:\n",
        "Find all the subsets from a set of numbers whose sum is zero.\n",
        "\n",
        "Constraint: Subset size must be 5\n",
        "Set={-12, -3, -6, 7, 2, -2, 6, 3, 9, -7, -5, -8, 1, 11, -9, -4}\n",
        "\n",
        "1.1 Library inclusion\n"
      ],
      "metadata": {
        "id": "z8DDBLtdebZg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import random as r"
      ],
      "metadata": {
        "id": "VUn-nrSzemQ3"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "1.2 Parameter Setting"
      ],
      "metadata": {
        "id": "zFZEjFfNe1hU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Set         = set([-12, -3, -6, 7, 2, -2, 6, 3, 9, -7, -5, -8, 1, 11, -9, -4])\n",
        "SetSize     = 5\n",
        "ResultList  = set()    # Store Result List i.e. list of sets whose sum is zero\n",
        "Iterations  = 1000    # Number of Inerations"
      ],
      "metadata": {
        "id": "MM1xpxALe7J4"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "1.3 Start Program"
      ],
      "metadata": {
        "id": "ri-UTak3fElq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Set         = set([-12, -3, -6, 7, 2, -2, 6, 3, 9, -7, -5, -8, 1, 11, -9, -4])\n",
        "SetSize     = 5\n",
        "ResultList  = set()    # Store Result List i.e. list of sets whose sum is zero\n",
        "Iterations  = 1000    # Number of Inerations\n",
        "for i in range(Iterations):\n",
        "    # Select number of elements from Set\n",
        "    Chromosome = r.sample(list(Set),SetSize) # Convert Set to list before sampling\n",
        "    if sum(Chromosome) == 0:\n",
        "        ResultList.add(tuple(sorted(Chromosome)))"
      ],
      "metadata": {
        "id": "NnZLt4VffJnD"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "1.4 Print the sets and total count"
      ],
      "metadata": {
        "id": "SGGFMEJDfSEX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Print all the sets whose sum is zero\n",
        "for r in ResultList:\n",
        "\tprint (r)\n",
        "\n",
        "# Print total sets\n",
        "print (\"\\nTotal Sets: \", len(ResultList), \"\\n\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uo1bGG5JfXO_",
        "outputId": "5d238002-0d1c-47fe-fdd7-1be51c01b05a"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(-12, -6, -2, 9, 11)\n",
            "(-8, -4, -3, 6, 9)\n",
            "(-8, -5, -4, 6, 11)\n",
            "(-9, -7, -4, 9, 11)\n",
            "(-7, -6, -2, 6, 9)\n",
            "(-6, -4, 1, 3, 6)\n",
            "(-7, -6, 1, 3, 9)\n",
            "(-12, -3, 1, 3, 11)\n",
            "(-12, -4, 2, 3, 11)\n",
            "(-8, -3, 1, 3, 7)\n",
            "(-7, -3, 1, 2, 7)\n",
            "(-8, -6, -3, 6, 11)\n",
            "(-6, -5, -2, 2, 11)\n",
            "(-9, -7, -2, 7, 11)\n",
            "(-6, -3, 1, 2, 6)\n",
            "(-4, -3, -2, 2, 7)\n",
            "(-9, -4, 1, 3, 9)\n",
            "(-12, -7, 1, 7, 11)\n",
            "(-6, -5, -2, 6, 7)\n",
            "(-7, -5, -3, 6, 9)\n",
            "\n",
            "Total Sets:  20 \n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1.5 Complete Program"
      ],
      "metadata": {
        "id": "lIN1ixn9fews"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#-------------------------------------------------------------\n",
        "# Step 1: Library inclusion\n",
        "#-------------------------------------------------------------\n",
        "import random as r\n",
        "\n",
        "\n",
        "#-------------------------------------------------------------\n",
        "# Step 2: Parameter Setting\n",
        "#-------------------------------------------------------------\n",
        "Set         = set([-12, -3, -6, 7, 2, -2, 6, 3, 9, -7, -5, -8, 1, 11, -9, -4])\n",
        "SetSize     = 5\n",
        "ResultList  = set()    # Store Result List i.e. list of sets whose sum is zero\n",
        "Iterations  = 1000   # Number of Inerations\n",
        "\n",
        "\n",
        "#-------------------------------------------------------------\n",
        "# Step3: Start Program\n",
        "#-------------------------------------------------------------\n",
        "\n",
        "# Loop till number of Iterations\n",
        "for i in range(Iterations):\n",
        "    # Select number of elements from Set\n",
        "    Chromosome = r.sample(list(Set),SetSize) # Convert Set to list before sampling\n",
        "\n",
        "    # Sum the number of elements in the Chromosome\n",
        "    if sum(Chromosome) == 0:\n",
        "        ResultList.add(tuple(sorted(Chromosome))) # Sort the Chromosome before adding to ResultList to ensure uniqueness\n",
        "\n",
        "# Print all the sets whose sum is zero\n",
        "for r in ResultList:\n",
        "        print (r)\n",
        "\n",
        "# Print total sets\n",
        "print (\"\\nTotal Sets: \", len(ResultList))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lzZatJHGfj7t",
        "outputId": "b1515fcd-9225-45fc-eca3-3cc9efa791cf"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(-12, -4, 1, 6, 9)\n",
            "(-8, -4, -3, 6, 9)\n",
            "(-8, -5, -4, 6, 11)\n",
            "(-8, -6, 1, 6, 7)\n",
            "(-9, -2, 2, 3, 6)\n",
            "(-7, -6, -2, 6, 9)\n",
            "(-6, -4, 1, 3, 6)\n",
            "(-7, -5, -2, 3, 11)\n",
            "(-9, -7, -2, 7, 11)\n",
            "(-9, -6, -5, 9, 11)\n",
            "(-6, -4, -2, 3, 9)\n",
            "(-12, -8, 3, 6, 11)\n",
            "(-8, -4, 2, 3, 7)\n",
            "(-8, -5, 1, 3, 9)\n",
            "(-8, -2, 1, 2, 7)\n",
            "(-9, -5, 1, 6, 7)\n",
            "(-7, -6, -3, 7, 9)\n",
            "(-9, -7, 1, 6, 9)\n",
            "(-8, -7, -2, 6, 11)\n",
            "(-7, -5, -4, 7, 9)\n",
            "(-6, -4, -2, 1, 11)\n",
            "(-8, -7, 2, 6, 7)\n",
            "(-12, -9, 3, 7, 11)\n",
            "(-9, -3, -2, 3, 11)\n",
            "(-12, -4, -2, 7, 11)\n",
            "\n",
            "Total Sets:  25\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1.6 Complete Program with sorting"
      ],
      "metadata": {
        "id": "FsJydAfnfsRo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#-------------------------------------------------------------\n",
        "# Step 1: Library inclusion\n",
        "#-------------------------------------------------------------\n",
        "import random as r\n",
        "\n",
        "\n",
        "#-------------------------------------------------------------\n",
        "# Step 2: Parameter Setting\n",
        "#-------------------------------------------------------------\n",
        "Set         = set([-12, -3, -6, 7, 2, -2, 6, 3, 9, -7, -5, -8, 1, 11, -9, -4])\n",
        "SetSize     = 5\n",
        "ResultList  = set()    # Store Result List i.e. list of sets whose sum is zero\n",
        "Iterations  = 1000   # Number of Inerations\n",
        "\n",
        "\n",
        "#-------------------------------------------------------------\n",
        "# Step3: Start Program\n",
        "#-------------------------------------------------------------\n",
        "\n",
        "# Loop till number of Iterations\n",
        "for i in range(Iterations):\n",
        "    # Select number of elements from Set\n",
        "    Chromosome = r.sample(list(Set),SetSize) # Convert Set to list before sampling\n",
        "    Chromosome.sort()\n",
        "\n",
        "    # Sum the number of elements in the Chromosome\n",
        "    if sum(Chromosome) == 0:\n",
        "        ResultList.add(tuple(sorted(Chromosome)))\n",
        "\n",
        "# Print all the sets whose sum is zero\n",
        "for r in ResultList:\n",
        "        print (r)\n",
        "\n",
        "# Print total sets\n",
        "print (\"\\nTotal Sets: \", len(ResultList))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "txRx2ibMfypU",
        "outputId": "d916b905-f55b-4c70-a748-7b7d1fed0a09"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(-12, -6, -2, 9, 11)\n",
            "(-12, -4, 1, 6, 9)\n",
            "(-9, -8, -3, 9, 11)\n",
            "(-8, -4, -3, 6, 9)\n",
            "(-9, -2, 1, 3, 7)\n",
            "(-5, -4, -3, 1, 11)\n",
            "(-9, -7, 2, 3, 11)\n",
            "(-8, -6, -2, 7, 9)\n",
            "(-9, -5, 2, 3, 9)\n",
            "(-7, -6, 1, 3, 9)\n",
            "(-6, -4, 1, 2, 7)\n",
            "(-7, -5, -2, 3, 11)\n",
            "(-4, -2, 1, 2, 3)\n",
            "(-8, -3, 1, 3, 7)\n",
            "(-8, -4, -2, 3, 11)\n",
            "(-9, -8, 1, 7, 9)\n",
            "(-8, -4, 1, 2, 9)\n",
            "(-8, -6, 1, 2, 11)\n",
            "(-8, -4, 2, 3, 7)\n",
            "(-12, -5, 2, 6, 9)\n",
            "(-6, -5, -4, 6, 9)\n",
            "(-9, -5, 1, 6, 7)\n",
            "(-7, -6, -3, 7, 9)\n",
            "(-9, -5, -3, 6, 11)\n",
            "(-12, -5, -3, 9, 11)\n",
            "(-9, -6, 1, 3, 11)\n",
            "(-7, -6, -4, 6, 11)\n",
            "(-8, -5, -3, 7, 9)\n",
            "\n",
            "Total Sets:  28\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. Problem Statement:\n",
        "Find all the subsets from a set of numbers whose sum is zero.\n",
        "\n",
        "Constraint: Subset size must be 3 to 6 only\n",
        "Set={-12, -3, -6, 7, 2, -2, 6, 3, 9, -7, -5, -8, 1, 11, -9, -4}"
      ],
      "metadata": {
        "id": "LzjT3pqNf5Sb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#-------------------------------------------------------------\n",
        "# Step 1: Library inclusion\n",
        "#-------------------------------------------------------------\n",
        "import random as r\n",
        "\n",
        "\n",
        "#-------------------------------------------------------------\n",
        "# Step 2: Parameter Setting\n",
        "#-------------------------------------------------------------\n",
        "Set         = set([-12, -3, -6, 7, 2, -2, 6, 3, 9, -7, -5, -8, 1, 11, -9, -4])\n",
        "SetLB       = 3\n",
        "SetUB       = 6\n",
        "ResultList  = set()    # Store Result List i.e. list of sets whose sum is zero\n",
        "Iterations  = 1000   # Number of Inerations\n",
        "\n",
        "\n",
        "#-------------------------------------------------------------\n",
        "# Step3: Start Program\n",
        "#-------------------------------------------------------------\n",
        "\n",
        "# Loop till number of Iterations\n",
        "for i in range(Iterations):\n",
        "    # Select set size randomly\n",
        "    SetSize = r.randint(SetLB,SetUB)\n",
        "\n",
        "    # Select number of elements from Set\n",
        "    Chromosome = r.sample(list(Set),SetSize) # Convert Set to list before sampling\n",
        "    Chromosome.sort()\n",
        "\n",
        "    # Sum the number of elements in the Chromosome\n",
        "    if sum(Chromosome) == 0:\n",
        "        ResultList.add(tuple(sorted(Chromosome)))\n",
        "\n",
        "# Print all the sets whose sum is zero\n",
        "for r in ResultList:\n",
        "        print (r)\n",
        "\n",
        "# Print total sets\n",
        "print (\"\\nTotal Sets: \", len(ResultList))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fuFcI2RtgAvp",
        "outputId": "64b98347-55fb-4f29-e60c-b958bfda7998"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(-12, -3, 2, 6, 7)\n",
            "(-8, -3, 2, 9)\n",
            "(-12, -5, 6, 11)\n",
            "(-12, 1, 2, 9)\n",
            "(-8, -4, -3, 2, 6, 7)\n",
            "(-12, 3, 9)\n",
            "(-6, -5, -4, 1, 3, 11)\n",
            "(-6, -4, 1, 3, 6)\n",
            "(-9, -7, -6, 2, 9, 11)\n",
            "(-7, -6, 6, 7)\n",
            "(-12, -4, -3, 3, 7, 9)\n",
            "(-7, -4, -3, 1, 6, 7)\n",
            "(-9, -2, 11)\n",
            "(-6, -3, 1, 2, 6)\n",
            "(-7, -5, -4, -2, 7, 11)\n",
            "(-9, -7, 3, 6, 7)\n",
            "(-9, -6, 6, 9)\n",
            "(-9, -8, -2, 2, 6, 11)\n",
            "(-6, -5, 11)\n",
            "(-9, -5, -4, 3, 6, 9)\n",
            "(-6, -3, 2, 7)\n",
            "(-8, -4, -2, 1, 2, 11)\n",
            "(-5, -4, -2, 11)\n",
            "\n",
            "Total Sets:  23\n"
          ]
        }
      ]
    }
  ]
}